# define y, D, X
y <- data_generate$Y
D = data_generate$D
X = as.matrix(data_generate[, -c(1,2,3,4)])
# addictive fixed effect
fit_TWFE = double_selection_TWFE(Y = y, D = D, X = X, data = data_generate)
# kmeans plus double selection
fit_kmeans = hdpcluster_ds(y = y, X = X, T = T, D = D, index = c('id', 'time'), data = data_generate, type_cluster = 'one way kmeans')
fit_pesudo = hdpcluster_ds(y = y, X = X, T = T, D = D, index = c('id', 'time'), data = data_generate, type_cluster = 'one way pesudo')
fit_kmeas_dml = hdpcluster_dml(y = y, X = X, T = T, D = D, index = c('id', 'time'), data = data_generate, type_cluster = 'one way kmeans')
generate_high <- function(N, K, T, DGP, rho=0, rho_0 = 0, kappa=0, kappa_0 = 0, zeta = 0, beta){
# Generate Random Error Matrices and Unobservables
# error term v_{it}
E <- matrix(0, N*T, 1)
E[1:N,1] = rnorm(N)
if(T != 1){
for(t in 1:(T-1) ){
E[(N+(t-1)*N + 1):(N+t*N), 1 ] = zeta * E[(N+(t-2)*N + 1):(N+(t-1)*N), 1] + rnorm(N, 0, 1 - zeta^2)
}
}
# error term u_{itk}
U = matrix(0, N*T, K)
Delta_0 = generate_toeplitz_cov(K, kappa_0)
# for (i in 1:N) {
#   U[i,] = MASS::mvrnorm(1, mu = rep(0,K), Sigma = Delta_0)
#   for (t in 1:(T-1)) {
#     U[i+t*N,] = U[i,] + rnorm(K,0,1 - kappa^2)
#   }
# }
U[1:N,] <- MASS::mvrnorm(N, mu = rep(0,K), Sigma = Delta_0)
if(T != 1){
for(t in 1:(T-1) ){
U[(N+(t-1)*N + 1):(N+t*N),  ] = kappa * U[(N+(t-2)*N + 1):(N+(t-1)*N), ] + MASS::mvrnorm(N, mu = rep(0,K), Sigma = diag(1-kappa^2, K) )
}
}
# gamma_{tk}
Gamma = matrix(0, T, K+1)
Gamma[1,] = MASS::mvrnorm(1, rep(0,K+1),  generate_toeplitz_cov(K+1, rho_0))
if (T != 1){
for (t in 2:(T)) {
Gamma[t,] = rho * Gamma[t-1, ] + rnorm(K+1, 0, 1 - rho^2 )
}
}
# Compute H and G Matrices
A <- rgamma(N, 1)
A_rep <- matrix(rep(A, K+1), N*T, K+1)
B_rep <- Gamma[rep(1:nrow(Gamma), each = N), ]      #t(matrix(rep(Gamma, N), T*(K+1), N))
U_rep <- U
if (DGP==1){
F <- (0.5 * A_rep[,ncol(A_rep)]^2 + 0.5 * B_rep[,ncol(B_rep)]^2)^(1/8)
H <- (0.5 * A_rep[,-ncol(A_rep)]^2 + 0.5 * B_rep[,-ncol(B_rep)]^2)^(1/8)
} else if (DGP ==2){
F <- (A_rep^2 + B_rep[,ncol(B_rep)] * A_rep + sin(B_rep[,ncol(B_rep)]*A_rep))^(1/4)
H <- (A_rep^2 + B_rep[,-ncol(B_rep)] * A_rep + sin(B_rep[,-ncol(B_rep)]*A_rep))^(1/4)
}
# Generate X and Y Matrices
X <- H + U_rep #11,21,31,..,N1,12,22,..,N2
Y <- U_rep %*% beta + F + E
id_index = rep(seq(1,N),T)
time_index = rep(1:N, each=T)
data = data.frame(id = id_index, time = time_index, Y = Y, D = X[,1], X = X[,-1])
return(data)
}
generate_toeplitz_cov <- function(K, rho) {
# K: Dimension of covariance matrix
# rho: Correlation decay factor
row_idx <- matrix(1:K, nrow=K, ncol=K, byrow=TRUE)
col_idx <- matrix(1:K, nrow=K, ncol=K, byrow=FALSE)
toeplitz_matrix <- rho^abs(row_idx - col_idx)  # Exponential decay structure
return(toeplitz_matrix)
}
library(hdi)
library(hdm)
library(foreach)
library(doParallel)
library (parallel)
library(Matrix)
library(MASS)
library(DoubleML)
library(glmnet)
library(mlr3)
library(mlr3learners)
library(data.table)
library(sandwich)
library(plm)
library(fixest)
library(dplyr)
library(Rcpp)
library(HDpcluster)
T = 1
n = 100
N = n
K = 150
it = 100
data_generate <- generate_high(N, K, T, DGP = 1, rho=0.5, rho_0 = 0.3, kappa=0.5, kappa_0 = 0.3, zeta = 0.5, beta = c(1, 0.5 ^ seq(0,  10), rep(0, K - 12)) )
# define y, D, X
y <- data_generate$Y
D = data_generate$D
X = as.matrix(data_generate[, -c(1,2,3,4)])
# addictive fixed effect
fit_TWFE = double_selection_TWFE(Y = y, D = D, X = X, data = data_generate)
# kmeans plus double selection
fit_kmeans = hdpcluster_ds(y = y, X = X, T = T, D = D, index = c('id', 'time'), data = data_generate, type_cluster = 'one way kmeans')
fit_pesudo = hdpcluster_ds(y = y, X = X, T = T, D = D, index = c('id', 'time'), data = data_generate, type_cluster = 'one way pesudo')
fit_kmeas_dml = hdpcluster_dml(y = y, X = X, T = T, D = D, index = c('id', 'time'), data = data_generate, type_cluster = 'one way kmeans')
generate_high <- function(N, K, T, DGP, rho=0, rho_0 = 0, kappa=0, kappa_0 = 0, zeta = 0, beta){
# Generate Random Error Matrices and Unobservables
# error term v_{it}
E <- matrix(0, N*T, 1)
E[1:N,1] = rnorm(N)
if(T != 1){
for(t in 1:(T-1) ){
E[(N+(t-1)*N + 1):(N+t*N), 1 ] = zeta * E[(N+(t-2)*N + 1):(N+(t-1)*N), 1] + rnorm(N, 0, 1 - zeta^2)
}
}
# error term u_{itk}
U = matrix(0, N*T, K)
Delta_0 = generate_toeplitz_cov(K, kappa_0)
# for (i in 1:N) {
#   U[i,] = MASS::mvrnorm(1, mu = rep(0,K), Sigma = Delta_0)
#   for (t in 1:(T-1)) {
#     U[i+t*N,] = U[i,] + rnorm(K,0,1 - kappa^2)
#   }
# }
U[1:N,] <- MASS::mvrnorm(N, mu = rep(0,K), Sigma = Delta_0)
if(T != 1){
for(t in 1:(T-1) ){
U[(N+(t-1)*N + 1):(N+t*N),  ] = kappa * U[(N+(t-2)*N + 1):(N+(t-1)*N), ] + MASS::mvrnorm(N, mu = rep(0,K), Sigma = diag(1-kappa^2, K) )
}
}
# gamma_{tk}
Gamma = matrix(0, T, K+1)
Gamma[1,] = MASS::mvrnorm(1, rep(0,K+1),  generate_toeplitz_cov(K+1, rho_0))
if (T != 1){
for (t in 2:(T)) {
Gamma[t,] = rho * Gamma[t-1, ] + rnorm(K+1, 0, 1 - rho^2 )
}
}
# Compute H and G Matrices
A <- rgamma(N, 1)
A_rep <- matrix(rep(A, K+1), N*T, K+1)
B_rep <- Gamma[rep(1:nrow(Gamma), each = N), ]      #t(matrix(rep(Gamma, N), T*(K+1), N))
U_rep <- U
if (DGP==1){
F <- (0.5 * A_rep[,ncol(A_rep)]^2 + 0.5 * B_rep[,ncol(B_rep)]^2)^(1/8)
H <- (0.5 * A_rep[,-ncol(A_rep)]^2 + 0.5 * B_rep[,-ncol(B_rep)]^2)^(1/8)
} else if (DGP ==2){
F <- (A_rep^2 + B_rep[,ncol(B_rep)] * A_rep + sin(B_rep[,ncol(B_rep)]*A_rep))^(1/4)
H <- (A_rep^2 + B_rep[,-ncol(B_rep)] * A_rep + sin(B_rep[,-ncol(B_rep)]*A_rep))^(1/4)
}
# Generate X and Y Matrices
X <- H + U_rep #11,21,31,..,N1,12,22,..,N2
Y <- U_rep %*% beta + F + E
id_index = rep(seq(1,N),T)
time_index = rep(1:N, each=T)
data = data.frame(id = id_index, time = time_index, Y = Y, D = X[,1], X = X[,-1])
return(data)
}
generate_toeplitz_cov <- function(K, rho) {
# K: Dimension of covariance matrix
# rho: Correlation decay factor
row_idx <- matrix(1:K, nrow=K, ncol=K, byrow=TRUE)
col_idx <- matrix(1:K, nrow=K, ncol=K, byrow=FALSE)
toeplitz_matrix <- rho^abs(row_idx - col_idx)  # Exponential decay structure
return(toeplitz_matrix)
}
library(hdi)
library(hdm)
library(foreach)
library(doParallel)
library (parallel)
library(Matrix)
library(MASS)
library(DoubleML)
library(glmnet)
library(mlr3)
library(mlr3learners)
library(data.table)
library(sandwich)
library(plm)
library(fixest)
library(dplyr)
library(Rcpp)
library(HDpcluster)
T = 1
n = 100
N = n
K = 150
it = 100
data_generate <- generate_high(N, K, T, DGP = 1, rho=0.5, rho_0 = 0.3, kappa=0.5, kappa_0 = 0.3, zeta = 0.5, beta = c(1, 0.5 ^ seq(0,  10), rep(0, K - 12)) )
# define y, D, X
y <- data_generate$Y
D = data_generate$D
X = as.matrix(data_generate[, -c(1,2,3,4)])
# addictive fixed effect
fit_TWFE = double_selection_TWFE(Y = y, D = D, X = X, data = data_generate)
# kmeans plus double selection
fit_kmeans = hdpcluster_ds(y = y, X = X, T = T, D = D, index = c('id', 'time'), data = data_generate, type_cluster = 'one way kmeans')
fit_pesudo = hdpcluster_ds(y = y, X = X, T = T, D = D, index = c('id', 'time'), data = data_generate, type_cluster = 'one way pesudo')
fit_kmeas_dml = hdpcluster_dml(y = y, X = X, T = T, D = D, index = c('id', 'time'), data = data_generate, type_cluster = 'one way kmeans')
generate_high <- function(N, K, T, DGP, rho=0, rho_0 = 0, kappa=0, kappa_0 = 0, zeta = 0, beta){
# Generate Random Error Matrices and Unobservables
# error term v_{it}
E <- matrix(0, N*T, 1)
E[1:N,1] = rnorm(N)
if(T != 1){
for(t in 1:(T-1) ){
E[(N+(t-1)*N + 1):(N+t*N), 1 ] = zeta * E[(N+(t-2)*N + 1):(N+(t-1)*N), 1] + rnorm(N, 0, 1 - zeta^2)
}
}
# error term u_{itk}
U = matrix(0, N*T, K)
Delta_0 = generate_toeplitz_cov(K, kappa_0)
# for (i in 1:N) {
#   U[i,] = MASS::mvrnorm(1, mu = rep(0,K), Sigma = Delta_0)
#   for (t in 1:(T-1)) {
#     U[i+t*N,] = U[i,] + rnorm(K,0,1 - kappa^2)
#   }
# }
U[1:N,] <- MASS::mvrnorm(N, mu = rep(0,K), Sigma = Delta_0)
if(T != 1){
for(t in 1:(T-1) ){
U[(N+(t-1)*N + 1):(N+t*N),  ] = kappa * U[(N+(t-2)*N + 1):(N+(t-1)*N), ] + MASS::mvrnorm(N, mu = rep(0,K), Sigma = diag(1-kappa^2, K) )
}
}
# gamma_{tk}
Gamma = matrix(0, T, K+1)
Gamma[1,] = MASS::mvrnorm(1, rep(0,K+1),  generate_toeplitz_cov(K+1, rho_0))
if (T != 1){
for (t in 2:(T)) {
Gamma[t,] = rho * Gamma[t-1, ] + rnorm(K+1, 0, 1 - rho^2 )
}
}
# Compute H and G Matrices
A <- rgamma(N, 1)
A_rep <- matrix(rep(A, K+1), N*T, K+1)
B_rep <- Gamma[rep(1:nrow(Gamma), each = N), ]      #t(matrix(rep(Gamma, N), T*(K+1), N))
U_rep <- U
if (DGP==1){
F <- (0.5 * A_rep[,ncol(A_rep)]^2 + 0.5 * B_rep[,ncol(B_rep)]^2)^(1/8)
H <- (0.5 * A_rep[,-ncol(A_rep)]^2 + 0.5 * B_rep[,-ncol(B_rep)]^2)^(1/8)
} else if (DGP ==2){
F <- (A_rep^2 + B_rep[,ncol(B_rep)] * A_rep + sin(B_rep[,ncol(B_rep)]*A_rep))^(1/4)
H <- (A_rep^2 + B_rep[,-ncol(B_rep)] * A_rep + sin(B_rep[,-ncol(B_rep)]*A_rep))^(1/4)
}
# Generate X and Y Matrices
X <- H + U_rep #11,21,31,..,N1,12,22,..,N2
Y <- U_rep %*% beta + F + E
id_index = rep(seq(1,N),T)
time_index = rep(1:N, each=T)
data = data.frame(id = id_index, time = time_index, Y = Y, D = X[,1], X = X[,-1])
return(data)
}
generate_toeplitz_cov <- function(K, rho) {
# K: Dimension of covariance matrix
# rho: Correlation decay factor
row_idx <- matrix(1:K, nrow=K, ncol=K, byrow=TRUE)
col_idx <- matrix(1:K, nrow=K, ncol=K, byrow=FALSE)
toeplitz_matrix <- rho^abs(row_idx - col_idx)  # Exponential decay structure
return(toeplitz_matrix)
}
library(hdi)
library(hdm)
library(foreach)
library(doParallel)
library (parallel)
library(Matrix)
library(MASS)
library(DoubleML)
library(glmnet)
library(mlr3)
library(mlr3learners)
library(data.table)
library(sandwich)
library(plm)
library(fixest)
library(dplyr)
library(Rcpp)
library(HDpcluster)
T = 1
n = 100
N = n
K = 150
it = 100
data_generate <- generate_high(N, K, T, DGP = 1, rho=0.5, rho_0 = 0.3, kappa=0.5, kappa_0 = 0.3, zeta = 0.5, beta = c(1, 0.5 ^ seq(0,  10), rep(0, K - 12)) )
# define y, D, X
y <- data_generate$Y
D = data_generate$D
X = as.matrix(data_generate[, -c(1,2,3,4)])
# addictive fixed effect
fit_TWFE = double_selection_TWFE(Y = y, D = D, X = X, data = data_generate)
# kmeans plus double selection
fit_kmeans = hdpcluster_ds(y = y, X = X, T = T, D = D, index = c('id', 'time'), data = data_generate, type_cluster = 'one way kmeans')
fit_pesudo = hdpcluster_ds(y = y, X = X, T = T, D = D, index = c('id', 'time'), data = data_generate, type_cluster = 'one way pesudo')
fit_kmeas_dml = hdpcluster_dml(y = y, X = X, T = T, D = D, index = c('id', 'time'), data = data_generate, type_cluster = 'one way kmeans')
generate_high <- function(N, K, T, DGP, rho=0, rho_0 = 0, kappa=0, kappa_0 = 0, zeta = 0, beta){
# Generate Random Error Matrices and Unobservables
# error term v_{it}
E <- matrix(0, N*T, 1)
E[1:N,1] = rnorm(N)
if(T != 1){
for(t in 1:(T-1) ){
E[(N+(t-1)*N + 1):(N+t*N), 1 ] = zeta * E[(N+(t-2)*N + 1):(N+(t-1)*N), 1] + rnorm(N, 0, 1 - zeta^2)
}
}
# error term u_{itk}
U = matrix(0, N*T, K)
Delta_0 = generate_toeplitz_cov(K, kappa_0)
# for (i in 1:N) {
#   U[i,] = MASS::mvrnorm(1, mu = rep(0,K), Sigma = Delta_0)
#   for (t in 1:(T-1)) {
#     U[i+t*N,] = U[i,] + rnorm(K,0,1 - kappa^2)
#   }
# }
U[1:N,] <- MASS::mvrnorm(N, mu = rep(0,K), Sigma = Delta_0)
if(T != 1){
for(t in 1:(T-1) ){
U[(N+(t-1)*N + 1):(N+t*N),  ] = kappa * U[(N+(t-2)*N + 1):(N+(t-1)*N), ] + MASS::mvrnorm(N, mu = rep(0,K), Sigma = diag(1-kappa^2, K) )
}
}
# gamma_{tk}
Gamma = matrix(0, T, K+1)
Gamma[1,] = MASS::mvrnorm(1, rep(0,K+1),  generate_toeplitz_cov(K+1, rho_0))
if (T != 1){
for (t in 2:(T)) {
Gamma[t,] = rho * Gamma[t-1, ] + rnorm(K+1, 0, 1 - rho^2 )
}
}
# Compute H and G Matrices
A <- rgamma(N, 1)
A_rep <- matrix(rep(A, K+1), N*T, K+1)
B_rep <- Gamma[rep(1:nrow(Gamma), each = N), ]      #t(matrix(rep(Gamma, N), T*(K+1), N))
U_rep <- U
if (DGP==1){
F <- (0.5 * A_rep[,ncol(A_rep)]^2 + 0.5 * B_rep[,ncol(B_rep)]^2)^(1/8)
H <- (0.5 * A_rep[,-ncol(A_rep)]^2 + 0.5 * B_rep[,-ncol(B_rep)]^2)^(1/8)
} else if (DGP ==2){
F <- (A_rep^2 + B_rep[,ncol(B_rep)] * A_rep + sin(B_rep[,ncol(B_rep)]*A_rep))^(1/4)
H <- (A_rep^2 + B_rep[,-ncol(B_rep)] * A_rep + sin(B_rep[,-ncol(B_rep)]*A_rep))^(1/4)
}
# Generate X and Y Matrices
X <- H + U_rep #11,21,31,..,N1,12,22,..,N2
Y <- U_rep %*% beta + F + E
id_index = rep(seq(1,N),T)
time_index = rep(1:N, each=T)
data = data.frame(id = id_index, time = time_index, Y = Y, D = X[,1], X = X[,-1])
return(data)
}
generate_toeplitz_cov <- function(K, rho) {
# K: Dimension of covariance matrix
# rho: Correlation decay factor
row_idx <- matrix(1:K, nrow=K, ncol=K, byrow=TRUE)
col_idx <- matrix(1:K, nrow=K, ncol=K, byrow=FALSE)
toeplitz_matrix <- rho^abs(row_idx - col_idx)  # Exponential decay structure
return(toeplitz_matrix)
}
library(hdi)
library(hdm)
library(foreach)
library(doParallel)
library (parallel)
library(Matrix)
library(MASS)
library(DoubleML)
library(glmnet)
library(mlr3)
library(mlr3learners)
library(data.table)
library(sandwich)
library(plm)
library(fixest)
library(dplyr)
library(Rcpp)
library(HDpcluster)
T = 1
n = 100
N = n
K = 150
it = 100
data_generate <- generate_high(N, K, T, DGP = 1, rho=0.5, rho_0 = 0.3, kappa=0.5, kappa_0 = 0.3, zeta = 0.5, beta = c(1, 0.5 ^ seq(0,  10), rep(0, K - 12)) )
# define y, D, X
y <- data_generate$Y
D = data_generate$D
X = as.matrix(data_generate[, -c(1,2,3,4)])
# addictive fixed effect
fit_TWFE = double_selection_TWFE(Y = y, D = D, X = X, data = data_generate)
# kmeans plus double selection
fit_kmeans = hdpcluster_ds(y = y, X = X, T = T, D = D, index = c('id', 'time'), data = data_generate, type_cluster = 'one way kmeans')
fit_pesudo = hdpcluster_ds(y = y, X = X, T = T, D = D, index = c('id', 'time'), data = data_generate, type_cluster = 'one way pesudo')
fit_kmeas_dml = hdpcluster_dml(y = y, X = X, T = T, D = D, index = c('id', 'time'), data = data_generate, type_cluster = 'one way kmeans')
fit_kmeas_dml
fit_kmeans
fit_pesudo
data_generate <- generate_high(N, K, T, DGP = 1, rho=0.5, rho_0 = 0.3, kappa=0.5, kappa_0 = 0.3, zeta = 0.5, beta = c(1, 0.5 ^ seq(0,  10), rep(0, K - 12)) )
# define y, D, X
y <- data_generate$Y
D = data_generate$D
X = as.matrix(data_generate[, -c(1,2,3,4)])
# addictive fixed effect
fit_TWFE = double_selection_TWFE(Y = y, D = D, X = X, data = data_generate)
# kmeans plus double selection
fit_kmeans = hdpcluster_ds(y = y, X = X, T = T, D = D, index = c('id', 'time'), data = data_generate, type_cluster = 'one way kmeans')
fit_pesudo = hdpcluster_ds(y = y, X = X, T = T, D = D, index = c('id', 'time'), data = data_generate, type_cluster = 'one way pesudo')
fit_kmeas_dml = hdpcluster_dml(y = y, X = X, T = T, D = D, index = c('id', 'time'), data = data_generate, type_cluster = 'one way kmeans')
fit_kmeas_dml
fit_pesudo
fit_kmeans
fit_kmeans_dml = hdpcluster_dml(y = y, X = X, T = T, D = D, index = c('id', 'time'), data = data_generate, type_cluster = 'one way kmeans')
fit_pesudo_dml = hdpcluster_dml(y = y, X = X, T = T, D = D, index = c('id', 'time'), data = data_generate, type_cluster = 'one way pesudo')
devtools::load_all(".")
generate_high <- function(N, K, T, DGP, rho=0, rho_0 = 0, kappa=0, kappa_0 = 0, zeta = 0, beta){
# Generate Random Error Matrices and Unobservables
# error term v_{it}
E <- matrix(0, N*T, 1)
E[1:N,1] = rnorm(N)
if(T != 1){
for(t in 1:(T-1) ){
E[(N+(t-1)*N + 1):(N+t*N), 1 ] = zeta * E[(N+(t-2)*N + 1):(N+(t-1)*N), 1] + rnorm(N, 0, 1 - zeta^2)
}
}
# error term u_{itk}
U = matrix(0, N*T, K)
Delta_0 = generate_toeplitz_cov(K, kappa_0)
# for (i in 1:N) {
#   U[i,] = MASS::mvrnorm(1, mu = rep(0,K), Sigma = Delta_0)
#   for (t in 1:(T-1)) {
#     U[i+t*N,] = U[i,] + rnorm(K,0,1 - kappa^2)
#   }
# }
U[1:N,] <- MASS::mvrnorm(N, mu = rep(0,K), Sigma = Delta_0)
if(T != 1){
for(t in 1:(T-1) ){
U[(N+(t-1)*N + 1):(N+t*N),  ] = kappa * U[(N+(t-2)*N + 1):(N+(t-1)*N), ] + MASS::mvrnorm(N, mu = rep(0,K), Sigma = diag(1-kappa^2, K) )
}
}
# gamma_{tk}
Gamma = matrix(0, T, K+1)
Gamma[1,] = MASS::mvrnorm(1, rep(0,K+1),  generate_toeplitz_cov(K+1, rho_0))
if (T != 1){
for (t in 2:(T)) {
Gamma[t,] = rho * Gamma[t-1, ] + rnorm(K+1, 0, 1 - rho^2 )
}
}
# Compute H and G Matrices
A <- rgamma(N, 1)
A_rep <- matrix(rep(A, K+1), N*T, K+1)
B_rep <- Gamma[rep(1:nrow(Gamma), each = N), ]      #t(matrix(rep(Gamma, N), T*(K+1), N))
U_rep <- U
if (DGP==1){
F <- (0.5 * A_rep[,ncol(A_rep)]^2 + 0.5 * B_rep[,ncol(B_rep)]^2)^(1/8)
H <- (0.5 * A_rep[,-ncol(A_rep)]^2 + 0.5 * B_rep[,-ncol(B_rep)]^2)^(1/8)
} else if (DGP ==2){
F <- (A_rep^2 + B_rep[,ncol(B_rep)] * A_rep + sin(B_rep[,ncol(B_rep)]*A_rep))^(1/4)
H <- (A_rep^2 + B_rep[,-ncol(B_rep)] * A_rep + sin(B_rep[,-ncol(B_rep)]*A_rep))^(1/4)
}
# Generate X and Y Matrices
X <- H + U_rep #11,21,31,..,N1,12,22,..,N2
Y <- U_rep %*% beta + F + E
id_index = rep(seq(1,N),T)
time_index = rep(1:N, each=T)
data = data.frame(id = id_index, time = time_index, Y = Y, D = X[,1], X = X[,-1])
return(data)
}
generate_toeplitz_cov <- function(K, rho) {
# K: Dimension of covariance matrix
# rho: Correlation decay factor
row_idx <- matrix(1:K, nrow=K, ncol=K, byrow=TRUE)
col_idx <- matrix(1:K, nrow=K, ncol=K, byrow=FALSE)
toeplitz_matrix <- rho^abs(row_idx - col_idx)  # Exponential decay structure
return(toeplitz_matrix)
}
library(foreach)
library(doParallel)
library (parallel)
library(Matrix)
library(MASS)
library(data.table)
library(sandwich)
library(dplyr)
library(HDpcluster)
T = 1
n = 100
N = n
K = 150
it = 100
data_generate <- generate_high(N, K, T, DGP = 1, rho=0.5, rho_0 = 0.3, kappa=0.5, kappa_0 = 0.3, zeta = 0.5, beta = c(1, 0.5 ^ seq(0,  10), rep(0, K - 12)) )
# define y, D, X
y <- data_generate$Y
D = data_generate$D
X = as.matrix(data_generate[, -c(1,2,3,4)])
# addictive fixed effect
fit_TWFE = double_selection_TWFE(Y = y, D = D, X = X, data = data_generate)
# kmeans plus double selection
fit_kmeans = hdpcluster_ds(y = y, X = X, T = T, D = D, index = c('id', 'time'), data = data_generate, type_cluster = 'one way kmeans')
fit_pesudo = hdpcluster_ds(y = y, X = X, T = T, D = D, index = c('id', 'time'), data = data_generate, type_cluster = 'one way pesudo')
fit_kmeans_dml = hdpcluster_dml(y = y, X = X, T = T, D = D, index = c('id', 'time'), data = data_generate, type_cluster = 'one way kmeans')
fit_pesudo_dml = hdpcluster_dml(y = y, X = X, T = T, D = D, index = c('id', 'time'), data = data_generate, type_cluster = 'one way pesudo')
fit_pesudo
fit_kmeans
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
